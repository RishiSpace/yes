# This workflow builds your project and commits the build output to a 'deploy' branch.
#
# To use this file:
# 1. Create a folder named .github/workflows in the root of your repository.
# 2. Save this file as 'build-and-deploy.yml' (or any .yml name) inside that folder.
# 3. Push this file to your 'main' branch.
#
# On the next push to 'main', this action will run.

name: Deploy YES

# Triggers the workflow on push events to the 'main' branch
on:
  push:
    branches:
      - main # Change this to your primary branch (e.g., master)

jobs:
  build-and-deploy:
    # Add permissions for the GITHUB_TOKEN to allow writing to the repo
    permissions:
      contents: write

    # Use the latest Ubuntu runner
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository code
      - name: Checkout 🛎️
        uses: actions/checkout@v4

      # Step 2: Set up Node.js environment
      - name: Setup Node.js 🟩
        uses: actions/setup-node@v4
        with:
          # Specify the Node.js version you use
          node-version: '20'
          # Use npm caching to speed up subsequent builds
          cache: 'npm'

      # Step 3: Install project dependencies
      - name: Install Dependencies 👨‍💻
        # 'npm ci' is recommended for CI environments for faster, reliable installs
        run: npm ci

      # Step 4: Run the build script for Vite
      - name: Build Project 🏗️
        run: npm run build -- --base=/${{ github.event.repository.name }}/
        # We pass --base=/${{ github.event.repository.name }}/ to npm run build.
        # The '--' passes the flag to the underlying 'vite build' command.
        # This sets the correct asset paths for GitHub Pages,
        # fixing the "white screen" issue.
        # ${{ github.event.repository.name }} will be your repo name (e.g., 'yes').

      # Step 5: Deploy the build output to the 'deploy' branch
      - name: Deploy to 'deploy' branch 🚀
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          # The name of the branch to deploy to
          branch: deploy
          
          # The name of the folder containing your build output
          # Common names are 'dist', 'build', or 'out'.
          # Change this to match your project's build output directory.
          folder: dist
          
          # This will automatically create the 'deploy' branch if it doesn't exist
          # and force-push the new build, overwriting the previous contents.

